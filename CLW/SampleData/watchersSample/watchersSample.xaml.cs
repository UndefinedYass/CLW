//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.watchersSample
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class watchersSample { }
#else

	public class watchersSample : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public watchersSample()
		{
			try
			{
				Uri resourceUri = new Uri("/CLW;component/SampleData/watchersSample/watchersSample.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private newsSample _newsSample = new newsSample();

		public newsSample newsSample
		{
			get
			{
				return this._newsSample;
			}
		}

		private WatchersSample1 _WatchersSample = new WatchersSample1();

		public WatchersSample1 WatchersSample
		{
			get
			{
				return this._WatchersSample;
			}
		}
	}

	public class newsSample : System.Collections.ObjectModel.ObservableCollection<newsSampleItem>
	{ 
	}

	public class newsSampleItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Title = string.Empty;

		public string Title
		{
			get
			{
				return this._Title;
			}

			set
			{
				if (this._Title != value)
				{
					this._Title = value;
					this.OnPropertyChanged("Title");
				}
			}
		}

		private string _SubTitle = string.Empty;

		public string SubTitle
		{
			get
			{
				return this._SubTitle;
			}

			set
			{
				if (this._SubTitle != value)
				{
					this._SubTitle = value;
					this.OnPropertyChanged("SubTitle");
				}
			}
		}

		private string _Link = string.Empty;

		public string Link
		{
			get
			{
				return this._Link;
			}

			set
			{
				if (this._Link != value)
				{
					this._Link = value;
					this.OnPropertyChanged("Link");
				}
			}
		}

		private string _ContentText = string.Empty;

		public string ContentText
		{
			get
			{
				return this._ContentText;
			}

			set
			{
				if (this._ContentText != value)
				{
					this._ContentText = value;
					this.OnPropertyChanged("ContentText");
				}
			}
		}
	}

	public class WatchersSample1 : System.Collections.ObjectModel.ObservableCollection<WatchersSampleItem>
	{ 
	}

	public class WatchersSampleItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _StatusMessage = string.Empty;

		public string StatusMessage
		{
			get
			{
				return this._StatusMessage;
			}

			set
			{
				if (this._StatusMessage != value)
				{
					this._StatusMessage = value;
					this.OnPropertyChanged("StatusMessage");
				}
			}
		}

		private double _UnreadCount = 0;

		public double UnreadCount
		{
			get
			{
				return this._UnreadCount;
			}

			set
			{
				if (this._UnreadCount != value)
				{
					this._UnreadCount = value;
					this.OnPropertyChanged("UnreadCount");
				}
			}
		}

		private System.Windows.Media.ImageSource _IconSource = null;

		public System.Windows.Media.ImageSource IconSource
		{
			get
			{
				return this._IconSource;
			}

			set
			{
				if (this._IconSource != value)
				{
					this._IconSource = value;
					this.OnPropertyChanged("IconSource");
				}
			}
		}

		private bool _HasFavicon = false;

		public bool HasFavicon
		{
			get
			{
				return this._HasFavicon;
			}

			set
			{
				if (this._HasFavicon != value)
				{
					this._HasFavicon = value;
					this.OnPropertyChanged("HasFavicon");
				}
			}
		}

		private string _IconSource2 = string.Empty;

		public string IconSource2
		{
			get
			{
				return this._IconSource2;
			}

			set
			{
				if (this._IconSource2 != value)
				{
					this._IconSource2 = value;
					this.OnPropertyChanged("IconSource2");
				}
			}
		}
	}
#endif
}
