//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.DummyNotificationWindowData
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class DummyNotificationWindowData { }
#else

	public class DummyNotificationWindowData : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public DummyNotificationWindowData()
		{
			try
			{
				Uri resourceUri = new Uri("/CLW;component/SampleData/DummyNotificationWindowData/DummyNotificationWindowData.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private string _NItemTitle = string.Empty;

		public string NItemTitle
		{
			get
			{
				return this._NItemTitle;
			}

			set
			{
				if (this._NItemTitle != value)
				{
					this._NItemTitle = value;
					this.OnPropertyChanged("NItemTitle");
				}
			}
		}

		private System.Windows.Media.ImageSource _WatcherIcon = null;

		public System.Windows.Media.ImageSource WatcherIcon
		{
			get
			{
				return this._WatcherIcon;
			}

			set
			{
				if (this._WatcherIcon != value)
				{
					this._WatcherIcon = value;
					this.OnPropertyChanged("WatcherIcon");
				}
			}
		}

		private string _NItemSubTitle = string.Empty;

		public string NItemSubTitle
		{
			get
			{
				return this._NItemSubTitle;
			}

			set
			{
				if (this._NItemSubTitle != value)
				{
					this._NItemSubTitle = value;
					this.OnPropertyChanged("NItemSubTitle");
				}
			}
		}

		private string _NItemFastLink = string.Empty;

		public string NItemFastLink
		{
			get
			{
				return this._NItemFastLink;
			}

			set
			{
				if (this._NItemFastLink != value)
				{
					this._NItemFastLink = value;
					this.OnPropertyChanged("NItemFastLink");
				}
			}
		}
	}
#endif
}
